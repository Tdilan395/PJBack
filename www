#!/usr/bin/env node

const app = require('./app');
const http = require('http');
const mongoose = require('mongoose');


const dbUri = process.env.DB_URI || 'asdasdd';
const port = normalizePort(process.env.PORT);

app.set('port', port);

// Crear servidor HTTP
const server = http.createServer(app);

// Intentar conectar a MongoDB
console.log('Conectando a MongoDB...');
mongoose.connect(dbUri, { useNewUrlParser: true, useUnifiedTopology: true })
    .then(() => {
        console.log('Conectado a MongoDB');
        // Escuchar en el puerto especificado una vez que la conexiÃ³n a MongoDB sea exitosa
        server.listen(port, () => {
            console.log(`Servidor corriendo en el puerto ${port}`);
        });
    })
    .catch(err => {
        console.error('Error conectando a MongoDB', err);
        // Considera cerrar el servidor si no se puede conectar a MongoDB
        process.exit(1);
    });

// Manejadores de eventos para el servidor HTTP
server.on('error', onError);
server.on('listening', onListening);

function normalizePort(val) {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
        return val;
    }

    if (port >= 0) {
        return port;
    }

    return false;
}

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }
    const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

function onListening() {
    const addr = server.address();
    const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
    console.log('Listening on ' + bind);
}
